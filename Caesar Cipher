-------------------------------------------------------------------THE QUESTION-----------------------------------------------------------------------------------------

Julius Caesar protected his confidential information by encrypting it using a cipher. Caesar's cipher shifts each letter by a number of letters. If the shift takes you past the end of the alphabet, just rotate back to the front of the alphabet. In the case of a rotation by 3, w, x, y and z would map to z, a, b and c.

Original alphabet:      abcdefghijklmnopqrstuvwxyz
Alphabet rotated +3:    defghijklmnopqrstuvwxyzabc
Example


The alphabet is rotated by , matching the mapping above. The encrypted string is .

Note: The cipher only encrypts letters; symbols, such as -, remain unencrypted.

Function Description

Complete the caesarCipher function in the editor below.

caesarCipher has the following parameter(s):

string s: cleartext
int k: the alphabet rotation factor
Returns

string: the encrypted string
Input Format

The first line contains the integer, , the length of the unencrypted string.
The second line contains the unencrypted string, .
The third line contains , the number of letters to rotate the alphabet by.

Constraints



 is a valid ASCII string without any spaces.

Sample Input

11
middle-Outz
2
Sample Output

okffng-Qwvb
Explanation

Original alphabet:      abcdefghijklmnopqrstuvwxyz
Alphabet rotated +2:    cdefghijklmnopqrstuvwxyzab

m -> o
i -> k
d -> f
d -> f
l -> n
e -> g
-    -
O -> Q
u -> w
t -> v
z -> b


----------------------------------------------------THE SOLUTION----------------------------------------------------------------------------

#!/bin/python3

import math
import os
import random
import re
import sys

#
# Complete the 'caesarCipher' function below.
#
# The function is expected to return a STRING.
# The function accepts following parameters:
#  1. STRING s
#  2. INTEGER k
#

def caesarCipher(s, k):
    # Write your code here
    cipher = ''
    def find_remainder(k_find):
        remainder = k_find%26
        return remainder
    for item in s:
        if((ord(item)>=65 and ord(item)<=90)):
            if(k>25):
                extension = find_remainder(k)
                if(extension == 0):
                    final_value = ord(item)
                    cipher+=chr(final_value)
                else:
                    final_value = ord(item)+extension
                    if(final_value>90):
                        extension = final_value-90
                        final_value = 64+extension
                        cipher+=chr(final_value)
                    else:
                        cipher+=chr(final_value)
            else:
                if(ord(item)+k>90):
                    extension = ord(item)+k - 90
                    final_value = 64+extension
                    cipher+=chr(final_value)
                else:
                    final_value = ord(item)+k
                    cipher+=chr(final_value)
        elif(ord(item)>=97 and ord(item)<=122):
            if(k>25):
                extension = find_remainder(k)
                if(extension == 0):
                    final_value = ord(item)
                    cipher+=chr(final_value)
                else:
                    final_value = ord(item)+extension
                    if(final_value>122):
                        extension = final_value-122
                        final_value = 96+extension
                        cipher+=chr(final_value)
                    else:
                        cipher+=chr(final_value)
            else:
                if(ord(item)+k>122):
                    extension = ord(item)+k - 122
                    final_value = 96+extension
                    cipher+=chr(final_value)
                else:
                    final_value = ord(item)+k
                    cipher+=chr(final_value)
        else:
            final_value = ord(item)
            cipher+=chr(final_value)   
    return cipher
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    n = int(input().strip())

    s = input()

    k = int(input().strip())

    result = caesarCipher(s, k)

    fptr.write(result + '\n')

    fptr.close()
